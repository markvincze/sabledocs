version: 2.1

orbs:
  python: circleci/python@2.1.1

jobs:
  test:
    docker:
      - image: cimg/python:3.12.0
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/src/sabledocs/
      - run:
          name: Run the unit tests
          command: |
            pip install .
            python -m unittest discover tests

  build:
    docker:
      - image: cimg/python:3.12.0
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/src/sabledocs/
      - run:
          name: Build Python package
          command: |
            pip install build
            if [ $CIRCLE_BRANCH == "main" ]; then revision="${CIRCLE_BUILD_NUM}"; else revision="${CIRCLE_BUILD_NUM}dev"; fi
            python -m build -C--global-option=egg_info -C--global-option=--tag-build=".${revision}"
      - run:
          name: Persist package version in env var
          command: |
            package_base_version=$(grep 'version =' pyproject.toml | sed -e 's/version = "\(.*\)"/\1/')
            if [ $CIRCLE_BRANCH == "main" ]; then package_version="$package_base_version.${CIRCLE_BUILD_NUM}"; else package_version="$package_base_version.${CIRCLE_BUILD_NUM}.dev0"; fi
            echo "export PACKAGE_VERSION='$package_version'" >> $BASH_ENV
            cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - "dist/*"
            - "bash.env"

  publish_pypi:
    docker:
      - image: cimg/python:3.12.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish Python package to PyPi
          command: |
            pip install twine
            python -m twine upload -u __token__ -p ${PYPI_API_TOKEN} ~/project/dist/*

  generate_sample_docs:
    docker:
      - image: cimg/python:3.12.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "d5:12:33:42:6b:cd:57:b7:7f:08:2c:7a:a2:c4:54:6d"
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/src/sabledocs/
      - run:
          name: Generate and publish the sample documentation
          command: |
            git config --global user.email "mrk.vincze@gmail.com"
            git config --global user.name "sabledocs CI"
            chmod +x generate_sample_docs.sh
            ./generate_sample_docs.sh

  publish_docker_image:
    docker:
      - image: cimg/python:3.12.0
    parameters:
      variant:
        type: string
        default: bookworm
      is_default_variant:
        type: boolean
        default: false
      add_latest_tag:
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Restore environment variables
          command: |
            cat bash.env >> $BASH_ENV
      - run:
          name: Build and publish Docker image
          command: |
            image_tag=markvincze/sabledocs:${PACKAGE_VERSION}-<< parameters.variant >>
            sleep 60s # Sleeping to wait for the new package being available on PyPi.
            docker build -t ${image_tag} --build-arg sabledocs_version=${PACKAGE_VERSION} ./docker/<< parameters.variant >>
            echo "${DOCKERHUB_ACCESS_TOKEN}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            docker push "${image_tag}"
      - when:
          condition: << parameters.is_default_variant >>
          steps:
            - run:
                name: Tag default variant version
                command: |
                  specific_image_tag=markvincze/sabledocs:${PACKAGE_VERSION}-<< parameters.variant >>
                  default_variant_tag=markvincze/sabledocs:${PACKAGE_VERSION}
                  docker tag ${specific_image_tag} ${default_variant_tag}
                  echo "${DOCKERHUB_ACCESS_TOKEN}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
                  docker push ${default_variant_tag}
      - when:
          condition: << parameters.add_latest_tag >>
          steps:
            - run:
                name: Add latest tag
                command: |
                  specific_image_tag=markvincze/sabledocs:${PACKAGE_VERSION}-<< parameters.variant >>
                  docker tag ${specific_image_tag} markvincze/sabledocs:latest
                  echo "${DOCKERHUB_ACCESS_TOKEN}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
                  docker push markvincze/sabledocs:latest

workflows:
  build-and-publish:
    jobs:
      - test:
          name: test
      - build:
          name: build_dev
          requires:
            - test
          filters:
            branches:
              ignore:
                - main
      - build:
          name: build_stable
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - publish_pypi:
          name: publish_pypi_dev
          requires:
            - build_dev
      - publish_pypi:
          name: publish_pypi_stable
          requires:
            - build_stable
      - generate_sample_docs:
          requires:
            - publish_pypi_stable
      - publish_docker_image:
          name: publish_docker_image_bookworm_dev
          variant: bookworm
          is_default_variant: true
          requires:
            - publish_pypi_dev
      - publish_docker_image:
          name: publish_docker_image_slim_dev
          variant: slim
          requires:
            - publish_pypi_dev
      - publish_docker_image:
          name: publish_docker_image_alpine_dev
          variant: alpine
          requires:
            - publish_pypi_dev
      - publish_docker_image:
          name: publish_docker_image_bookworm_stable
          variant: bookworm
          is_default_variant: true
          add_latest_tag: true
          requires:
            - publish_pypi_stable
      - publish_docker_image:
          name: publish_docker_image_slim_stable
          variant: slim
          requires:
            - publish_pypi_stable
      - publish_docker_image:
          name: publish_docker_image_alpine_stable
          variant: alpine
          requires:
            - publish_pypi_stable
